/********************************************************************
				包含头文件
********************************************************************/
#include "stm32f10x.h"                   //STM32器件寄存器定义头文件，必须包含
#include "user_Config.h"                 //用户配置头文件，用于配置硬件连接资源,位于项目文件夹下
#include "TFT28.h"											 //TFT相关的函数声明头文件
#include "GUI.h"											   //TFT液晶GUI绘图函数声明头文件
#include "TOUCH.h"											 //触摸功能相关头文件
#include "usart.h"

unsigned int Device_code;                //TFT控制IC型号，2.8寸为ILI9328

GPIO_InitTypeDef GPIO_InitStructure;     //定义一个结构体变量GPIO_InitStructure，用于初始化GPIO操作
ErrorStatus HSEStartUpStatus;
uint xm,ym;
uint x;

/********************************************************************
				普通延时函数
********************************************************************/
void Delay(vu32 nCount)
{
  for(; nCount != 0; nCount--);
}


/********************************************************************
				GPIO初始化函数
********************************************************************/
void GPIO_Config(void)
{
	/* 配置数据口的GPIO管脚模式，输出模式*/
  	RCC_APB2PeriphClockCmd(RCC_GPIO_TFT, ENABLE); 					//使能GPIO时钟
  	GPIO_InitStructure.GPIO_Pin = D0 | D1 | D2 | D3 | D4 | D5 | D6 | D7 | TCLK | TCS | BUSY;  //使用PC0~PC7 PC8\9\10
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;				//GPIO工作在输出模式
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  	GPIO_Init(GPIO_TFT_DATA, &GPIO_InitStructure);  				//相关的GPIO口初始化
	
	/* 配置控制口A的GPIO管脚模式，输出模式，灌电流驱动*/
  	RCC_APB2PeriphClockCmd(RCC_GPIO_CTRA, ENABLE); 					//使能GPIO时钟
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8;  //使用PA0、PA1、PA8
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;				//GPIO工作在输出模式
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  	GPIO_Init(GPIO_CTRA, &GPIO_InitStructure);  						//相关的GPIO口初始化
		
		/* 配置控制口B的GPIO管脚模式，输出模式，灌电流驱动*/
  	RCC_APB2PeriphClockCmd(RCC_GPIO_CTRB, ENABLE); 					//使能GPIO时钟
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 |GPIO_Pin_2 |GPIO_Pin_8 ; //使用PB0.1.2.8
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;				//GPIO工作在输出模式
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  	GPIO_Init(GPIO_CTRB, &GPIO_InitStructure);  						//相关的GPIO口初始化
	
	  /* 配置控制口C的GPIO管脚模式，输出模式，灌电流驱动*/
  	RCC_APB2PeriphClockCmd(RCC_GPIO_TOUCHC, ENABLE); 					//使能GPIO时钟
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;  //使用PC11\12
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;		  //GPIO工作在输入模式
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  	GPIO_Init(GPIO_TOUCHC, &GPIO_InitStructure);  					  //相关的GPIO口初始化
		
		GPIO_ResetBits(GPIO_CTRB,GPIO_Pin_8);											//RD管脚置低
}




/********************************************************************
                      主函数
********************************************************************/
int main(void)
{
  GPIO_Config();															//GPIO初始化配置，针对LED灯接口配置
  Device_code=0x9320;                					//TFT控制IC型号
  TFT_Initial();                     					//初始化LCD
  start_7843();                      					//打开触摸功能	
  CLR_Screen(Black);               					//用背景色清屏
  LCD_PutString24(110,100,"UESTC",Red,Black); //欢迎界面，24x24大小汉字，字模软件隶书小二号 
	delayms(1000);
  CLR_Screen(White);                                       	//用背景色清屏
	x=0;


    while(1)                           					//循环执行程序
		{
			   
	    GUIline(0,0,120,0,Black);   //画线函数
         GUIline(0,0,0,30,Black);   //画线函数
         GUIline(0,30,120,30,Black);   //画线函数
         GUIline(120,0,120,30,Black);   //画线函数
        
         GUIline(130,90,190,90,Black);   //画线函数
         GUIline(130,90,130,150,Black);   //画线函数
         GUIline(130,150,190,150,Black);   //画线函数
         GUIline(190,90,190,150,Black);   //画线函数

         LCD_PutString24(140,110,"START",Black,White);
			   LCD_PutString24(0,0,"STATE:",Black,White);
       
				if(Getpix()==1)  
				{
				 if(ly < 190 && ly > 130 && lx > 90 && lx < 150)
					 { CLR_Screen(White);  
			     while(1)
				     {		  		

               GUIline(0,0,120,0,Black);   //画线函数
               GUIline(0,0,0,30,Black);   //画线函数
               GUIline(0,30,120,30,Black);   //画线函数
               GUIline(120,0,120,30,Black);   //画线函数
        
               GUIline(130,90,190,90,Black);   //画线函数
               GUIline(130,90,130,150,Black);   //画线函数
               GUIline(130,150,190,150,Black);   //画线函数
               GUIline(190,90,190,150,Black);   //画线函数

               LCD_PutString24(150,110,"PUT",Black,White);
               LCD_PutString24(0,0,"STATE:",Black,White);	
							 
		      		 GUIline(0,180,80,180,Black);   //画线函数
               GUIline(0,180,0,240,Black);   //画线函数
               GUIline(80,180,80,240,Black);   //画线函数
               GUIline(0,240,80,240,Black);   //画线函数
        
               GUIline(260,180,320,180,Black);   //画线函数
               GUIline(260,180,260,240,Black);   //画线函数
               GUIline(320,180,320,240,Black);   //画线函数
               GUIline(260,240,320,240,Black);   //画线函数
					
               GUIline(280,0,320,0,Black);   //画线函数
               GUIline(280,0,280,40,Black);   //画线函数
               GUIline(280,40,320,40,Black);   //画线函数
               GUIline(320,0,320,40,Black);   //画线函数
					
				       LCD_PutString24(270,200,"PRINT",Black,White);
               LCD_PutString24(20,200,"STOP",Black,White);
							 //LCD_PutString24(300,20,"0",Black,White);
	            if(Getpix()==1)  
				        {
				         
                 if(ly < 320 && ly > 260 && lx > 180 && lx < 240)
					       {    
						          //dayin
                 }
					       if(ly < 60 && ly > 0 && lx > 180 && lx < 240)
						     {
									 //stop
								 }
								 
								 if(ly < 190 && ly > 130 && lx > 90 && lx < 150)
					       {    
						          x = x + 1;
									 {
										 switch(x)
										 {
											 case 0:LCD_PutString24(300,20,"0",Black,White);break;
											 case 1:LCD_PutString24(300,20,"1",Black,White);break;
											 case 2:LCD_PutString24(300,20,"2",Black,White);break;
											 case 3:LCD_PutString24(300,20,"3",Black,White);break;
											 case 4:LCD_PutString24(300,20,"4",Black,White);break;
											 case 5:LCD_PutString24(300,20,"5",Black,White);break;
											 case 6:LCD_PutString24(300,20,"6",Black,White);break;
											 case 7:LCD_PutString24(300,20,"7",Black,White);break;
											 case 8:LCD_PutString24(300,20,"8",Black,White);break;
											 case 9:LCD_PutString24(300,20,"9",Black,White);break;
											 case 10:LCD_PutString24(300,20,"10",Black,White);break;
										   default:LCD_PutString24(300,20,"10",Black,White);break;										 
										 }
									 }
                 }
								 
               }								
			      }
//				      CLR_Screen(White); 
           }       
        }  
   }
}


