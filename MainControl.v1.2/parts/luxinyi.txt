/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
uint8_t Test_Cmd[] = {0x1b,0x40,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x1b,0x4a,0x30}; 
uint8_t Test_data1[] =                                                                       
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,//设置行间距
							0x1c,0x26,//设置中文模式//0x1B,0x42,0x10,
							0xB9,0xFD,0xD1,0xF5,0xBB,0xAF,0xC7,0xE2,0x0d,0x0a
              };
uint8_t Test_data[] =                                                                       //检验项目: CRP 
             {  
              0x1B,0x40,                                                         //初始化命令
              0x1b,0x33,0x30,
              0x30,0x31, 0x32,0x0d,0x0a, 
              0x30,0x31, 0x32,0x0d,0x0a,    
              0x30,0x31, 0x32,0x0d,0x0a,    
              0x1b,0x32,							 
              0x30,0x31, 0x32,0x0d,0x0a, 
              0x30,0x31, 0x32,0x0d,0x0a,    
              0x30,0x31, 0x32,0x0d,0x0a,    
							0x0d,0x0a,0x0d,0x0a
              };
uint8_t Test_data2[] =                                                                       
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0xB0,0xD7,0xCF,0xB8,0xB0,0xFB,0xF5,0xA5,0xC3,0xB8,0x0d,0x0a,
						 };
uint8_t Test_data3[] =                                                                       
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0xCD,0xD9,0xD2,0xBA,0xCB,0xE1,0xDC,0xD5,0xC3,0xB8,0x0d,0x0a
						 };
uint8_t Test_data4[] =                                                                      
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0xB8,0xAC,0xB0,0xB1,0xCB,0xE1,0xB0,0xB1,0xBB,0xF9,0xEB,0xC4,0xC3,0xB8,
						 };
uint8_t Test_data5[] =                                                                       
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0xD2,0xD2,0xF5,0xA3,0xB0,0xB1,0xBB,0xF9,0xC6,0xCF,0xCC,0xD1,0xCC,0xC7,0xDC,0xD5,0xC3,0xB8,
							//0x1c,0x26,0x0d,0x0a,0x0d,0x0a,
							//0x1C,0x26,0xA3,0xBA,
							//0x1C,0x2E,
							//0X20,0X20,0x36,0x2E,0x39,0x25,0x0d,0x0a,//换行
						 };
uint8_t Test_data6[] =                                                                        
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0xB0,0xD7,0xCF,0xB8,0xB0,0xFB,0xF5,0xA5,0xC3,0xB8,
							//0x1c,0x26,0x0d,0x0a,0x0d,0x0a,
							//0x1C,0x26,0xB4,0xF3,0xB3,0xA6,0xB8,0xCB,0xBE,0xFA,0xA3,0xBA,
							//0x1C,0x2E,
							//0X20,0X20,0x36,0x2E,0x39,0x25,0x0d,0x0a,//换行
						 };
uint8_t Test_data7[] =                                                                     
             {  
              0x1B,0x40,//初始化命令
							0x1B,0x33,0x30,0x1c,0x26,//0x1B,0x42,0x10,
							0x50,0x48,0x0d,0x0a,
							//0x1c,0x26,0x0d,0x0a,0x0d,0x0a,
							//0x1C,0x26,,0xB3,0xA6,0xB8,0xCB,0xBE,0xFA,0xA3,0xBA,
							//0x1C,0x2E,
							//0X20,0X20,0x36,0x2E,0x39,0x25,,//换行
						 };
uint8_t Test_result1[] = 
						 {0x1B,0x40,
						  0x1b,0x61,0x02,
						  0xD5,0xFD,0xB3,0xA3,0x0d,0x0a
						 };
uint8_t Test_result2[] = 
						 {0x1B,0x40,
						  0x1b,0x61,0x02,
						  0xB2,0xBB,0xD5,0xFD,0xB3,0xA3,0x0d,0x0a
						 };
uint8_t one_must[] = {0x1b,0x40};                                                // 开始命令
uint8_t num_O[] = {0X30,0X31,0X32,0X33,0X34,0X35,0X36,0X37,0X38,0X39};           //十进制 0-9
uint8_t hang_dist[] = {0x1b,0x33,0x30};                                          //行间距 30*0.125mm = 3.75mm     
uint8_t hang_none[] = {0x1b,0x32};                                               //缺省行间距 固定为 3.75mm
//对齐方式
uint8_t duiqi_left[] = {0x1b,0x61,0x00};
uint8_t duiqi_mid[] =  {0x1b,0x61,0x01};
uint8_t duiqi_right[] = {0x1b,0x61,0x02};
uint8_t B0[40]={//***20
               0x1B,0x40,0x1b,0x57,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,  //0x01,0x1b,0x56,0x1c,0x49,0x00,
             0x1B,0x40,0x1b,0x57,0x01,0x1b,0x56,0x02,0x1c,0x49,0x02,
              0x1B,0x40,
             // 0x1b,0x57,0x02,
               };

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void U1_SendH(uint8_t data)
{
  uint8_t OutData;
	OutData = data&0xff;
	HAL_UART_Transmit(&huart2,&OutData,1,0xff);
}  

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
// 下面放在循环中会一直打印
     for(uint8_t i = 0;i < (sizeof(Test_data)/sizeof(Test_Cmd[0]));i++)
		 {	
       HAL_Delay(1);
			 U1_SendH(Test_data1[i]);      // 需要打印的数组，包括指令和内容
     }
		 /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
     for(uint8_t i = 0;i < (sizeof(Test_data1)/sizeof(Test_Cmd[0]));i++)
		 {	
       HAL_Delay(1);
			 U1_SendH(Test_data1[i]);      // 需要打印的数组，包括指令和内容
     }
		 HAL_Delay(200);
		  for(uint8_t j = 0;j < (sizeof(Test_data2)/sizeof(Test_Cmd[0]));j++)
		 {	
       HAL_Delay(1);
			 U1_SendH(Test_data2[j]);      // 需要打印的数组，包括指令和内容
     }
		 HAL_Delay(200);
		  for(uint8_t k = 0;k < (sizeof(Test_data3)/sizeof(Test_Cmd[0]));k++)
		 {	
       HAL_Delay(1);
			 U1_SendH(Test_data3[k]);      // 需要打印的数组，包括指令和内容
     }
		 HAL_Delay(200);
		  for(uint8_t l = 0;l < (sizeof(Test_data4)/sizeof(Test_Cmd[0]));l++)
		 {	
       HAL_Delay(1);
			 U1_SendH(Test_data4[l]);      // 需要打印的数组，包括指令和内容
     }
		 HAL_Delay(200);
  /* USER CODE BEGIN 3 */
 
  }
  /* USER CODE END 3 */


		 }

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
